                    How to Use Promises notes

What is a promise?
An object returned by an asynchronous function for the operation to succed or fail

promise-based API: the operation is started by the asynchronous function. The return is a promise object. Handlers are attached to the promise object. The handlers are executed if the operation succeeds or fails.

fetch() API: modern replacement for XMLHttpRequest.

1. Calling the fetch() API, the return value is assign to the fetchPromise variable
2. Output: Promise { <state: "pending"}, a Promise object with a state of "pending". Meaning the operation is still taking place.
3. If fetch() operation succeeds the handler is called by the promise and passes the Response object containing the server's response.
4. Started request... is logged

Received response: 200 is the status code. 200 is OK and the request was a success.

Note: a handler is passed into the then() method of the returned promise.

fetch() API -> Response object -> call another function -> response data

fetch() API -> Response object ->json() method -> response data as JSON
this is an example of two successive asynchronous functions being called

Promise chaining is used for consecutive asynchronous function calls
examples: 
          const fetchPromise = fetch('https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json');

          fetchPromise
            .then((response) => response.json())
            .then((data) => {
              console.log(data[0].name);
            });

const fetchPromise = fetch('https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json');

fetchPromise
  .then((response) => {
    if (!response.ok) {
      throw new Error(`HTTP error: ${response.status}`);
    }
    return response.json();
  })
  .then((data) => {
    console.log(data[0].name);
  });

Catching errors
reasons for error includes no network connectivity, malformed URL, etc...
catch() method is called when the asynchronous operation fails.
When it is added at the end of of a promise chain it is called when any asynchronous function call fails.

example of a catch() error handler:
  .catch((error) => {
    console.error(`Could not get products: ${error}`);
  });

error logged:
Could not get products: TypeError: Failed to fetch

Terminology

Three states of a promise
  1. Pending: a promise was created but the asynchronous function has not failed or succeded yet. In this state the promise returned from a fetch() call.
  2. fulfilled: This is when the asynchronous function is successful and the then() handler called.
  3. rejected: In this state the asynchronous function failed and so the promise is rejected. In this case, the catch() handler is called.

  Note: A fetch() request is successful even if the server returns an error(e.g 404 Not Found). However, this is not the case if a network error was the one preventing a request.

  Settled: term used for both fulfilled and rejected.

resolved: a promise is settled or follows another promise.

Promise Chain: the operation has several asynchronous functions. Each function is completed before the next one. 

Promise.all(): this is used for promises to be fulfilled but each do not depend on each other. All promises start at the same time and a single promise is returned.

Promise.all() fulfilled: in this state the then() handler is called when all the promises are fulfilled.

Promise.all() rejected: the catch() handler is called when any of the promises are rejected
and uses the error of the rejected promise in the catch().

Promise.any(): any one promise of a promise set is fulfilled.

Promise.any() rejected: it is rejected if all of the promises are rejected.

Async and await

Async function: add async at the front/start of a function.

Await keyword: await is used inside of an async function. It makes the code to wait for the promise to be settled. The rejected value is thrown.

How to use promises - learn web development: MDN. Learn web development | MDN. (n.d.). Retrieved April 24, 2023, from https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises 